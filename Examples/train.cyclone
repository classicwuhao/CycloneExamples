option-trace=true;          //generate a trace
option-precision=5;
graph train_braking_controller {
    real p where p>=0,v;   // position and velocity
    real ua;               // acceleration
    real t;                // time pointer (now)
    real dt where dt >0;   // sampling time
    real S;                // position of the stop sign
    real A,B;              // (de)acceleration A and B

    normal start node Init{}
    abstract node Decide{}
    normal final node Acc{ua = A;}
    normal final node Brake{ua = -B;}
    normal final node Maintain{ua = 0;}
    normal final node Progression {
        p = p + (v * dt) + (0.5 * ua * dt * dt);
        v = v + (ua * dt);
        t = t + dt;
    }
    
    edge {Init -> Decide}
    edge {Decide -> Acc where v>=0 && (p + ((v * v) / (2 * B)) 
                + (A/B+1)*(0.5*A*dt*dt+dt*v) <= S);}

    edge {Decide -> Maintain where v==0 && !(p + ((v * v) / (2 * B))
            + (A/B+1)*(0.5*A*dt*dt+dt*v) <= S);}

    edge {Decide -> Brake where v!=0 && !(p + ((v * v) / (2 * B))
            + (A/B+1)*(0.5*A*dt*dt+dt*v) <= S);}

    edge {Acc -> Progression}
    edge {Brake -> Progression}
    edge {Maintain -> Progression}    
    edge {Progression -> Decide}

    /* proposed invariant */
    invariant PropInv{p + ((v * v) / (2 * B)) <= S && v >= 0;}
    
    goal{
      /* setting initial conditions */  
      assert (v >= 0 && t==0 && p>=0 && 
      p + ((v * v) / (2 * B)) <= S && dt>0 && S>0 && A>0 && B>0) in (Init);
      
      /* small scope check to find a counter-example */
      check for 3
    }
}